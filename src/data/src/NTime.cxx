/*
 * NTime.cxx
 *
 * Copyright (C) 2009-2009 by the NuSTAR team.
 * All rights reserved.
 *
 */


////////////////////////////////////////////////////////////////////////////////
//
// NTime
//
////////////////////////////////////////////////////////////////////////////////


// Include the header:
#include "NTime.h"

// Standard libs:
#include <sstream>
#include <iomanip>
using namespace std;

// ROOT libs:

// MEGAlib libs:

// NuSTAR libs:

////////////////////////////////////////////////////////////////////////////////


#ifdef ___CINT___
ClassImp(NTime)
#endif


////////////////////////////////////////////////////////////////////////////////


NTime::NTime()
{
  // Construct an instance of NTime

  Clear();
}


////////////////////////////////////////////////////////////////////////////////


NTime::NTime(const NTime& Time)
{
  // Construct an instance of NTime

  *this = Time;
}


////////////////////////////////////////////////////////////////////////////////


NTime::NTime(double Seconds)
{
  // Construct an instance of NTime

  m_Seconds = Seconds;
  m_Empty = false;
}


////////////////////////////////////////////////////////////////////////////////


NTime::~NTime()
{
  // Delete this instance of NTime
}


////////////////////////////////////////////////////////////////////////////////


void NTime::Clear() 
{
  // Reset the time data to "NotDefined" values

  m_Seconds = g_DoubleNotDefined;

  m_Empty = true;
}


////////////////////////////////////////////////////////////////////////////////


NTime& NTime::operator=(const NTime& T)
{
  // Assignment operator

  m_Seconds = T.m_Seconds;
  m_Empty = T.m_Empty;

  return *this;
}


////////////////////////////////////////////////////////////////////////////////


NTime& NTime::operator=(const double& T)
{
  // Assignment operator utilizing a double

  m_Seconds = T;
  m_Empty = false;

  return *this;
}


////////////////////////////////////////////////////////////////////////////////


NTime& NTime::operator+=(const NTime& T)
{
  // += operator

  m_Seconds += T.m_Seconds;
  m_Empty = false;

  return *this;
}


////////////////////////////////////////////////////////////////////////////////


NTime& NTime::operator+=(const double& T)
{
  // += operator

  m_Seconds += T;
  m_Empty = false;

  return *this;
}


////////////////////////////////////////////////////////////////////////////////


NTime& NTime::operator-=(const NTime& T)
{
  // -= operator

  m_Seconds -= T.m_Seconds;
  m_Empty = false;

  return *this;
}


////////////////////////////////////////////////////////////////////////////////


NTime& NTime::operator-=(const double& T)
{
  // -= operator

  m_Seconds -= T;
  m_Empty = false;

  return *this;
}


////////////////////////////////////////////////////////////////////////////////


bool NTime::operator==(const NTime& T) const
{
  // == operator

  return (m_Seconds == T.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


bool NTime::operator!=(const NTime& T) const
{
  // != operator

  return (m_Seconds != T.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


bool NTime::operator>(const NTime& T) const
{
  // > operator

  return (m_Seconds > T.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


bool NTime::operator<(const NTime& T) const
{
  // < operator

  return (m_Seconds < T.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


bool NTime::operator>=(const NTime& T) const
{
  // >= operator

  return (m_Seconds >= T.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


bool NTime::operator<=(const NTime& T) const
{
  // < operator

  return (m_Seconds <= T.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


NTime NTime::operator+(const NTime& Time) const
{
  //! The + operator 

  return NTime(m_Seconds + Time.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


NTime NTime::operator+(const double& Time) const
{
  //! The + operator with a double

  return NTime(m_Seconds + Time);
}


////////////////////////////////////////////////////////////////////////////////


NTime NTime::operator-(const NTime& Time) const
{
  //! The - operator 

  return NTime(m_Seconds - Time.m_Seconds);
}


////////////////////////////////////////////////////////////////////////////////


NTime NTime::operator-(const double& Time) const
{
  //! The - operator with a double

  return NTime(m_Seconds - Time);
}


////////////////////////////////////////////////////////////////////////////////


NTime NTime::operator*(const double& Scale) const
{
  //! The * operator with a double

  return NTime(m_Seconds*Scale);
}


////////////////////////////////////////////////////////////////////////////////


NTime NTime::operator/(const double& Scale) const
{
  //! The / operator with a double

  return NTime(m_Seconds/Scale);
}


////////////////////////////////////////////////////////////////////////////////


TString NTime::ToString() const
{
  // Dump the time as string ion seconds
  
  ostringstream out;
  out.precision(12);
  out<<m_Seconds<<" sec";

  return TString(out.str().c_str());
}


////////////////////////////////////////////////////////////////////////////////


TString NTime::GetString(unsigned int Precision) const
{
  // Dump the time as string ion seconds
  
  ostringstream out;
  out<<fixed<<setprecision(Precision)<<m_Seconds;

  return TString(out.str().c_str());
}


////////////////////////////////////////////////////////////////////////////////


std::ostream& operator<<(std::ostream& os, const NTime& Time)
{
  os<<Time.ToString();
  return os;
}


// NTime.cxx: the end...
////////////////////////////////////////////////////////////////////////////////
